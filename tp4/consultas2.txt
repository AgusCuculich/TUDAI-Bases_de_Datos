1) Utiliza el exist para evaluar si existe o no la pelicula cuyo codigo este en la tabla pelicula y renglon_entrega, tambien evalua si existe el num de entrega en ambas tablas y al mismo tiempo es del año 2006, etc. Esto trae como resultado un v o f, lo que viene joya ya que la subconsulta solo trae un resultado (de aqui que haya que usar el exists porque sino traeria todas las cosas que coinciden). En el caso del in, que se utiliza como or

SELECT p.codigo_pelicula AS "codigo", p.titulo, p.idioma FROM pelicula p WHERE
(idioma = 'Inglés' AND EXISTS (SELECT 1 FROM renglon_entrega r WHERE p.codigo_pelicula = r.codigo_pelicula AND
EXISTS (SELECT 2 FROM entrega e WHERE r.nro_entrega = e.nro_entrega AND EXTRACT(YEAR FROM fecha_entrega) = 2006))) LIMIT 200;

2) Aqui la primer opcion esta hecha con subconsultas mientras la segunda esta hecha con ensambles con join. Ademas la primera para chusmear con cuantas cantidades de peliculas distribuidas por un nacional en 2006, se realizo una agrupacion (para ver cuantos distribuyeron 1, 4, 200, etc) y en base a eso contarlas.

SELECT r.cantidad, count(cantidad) as "total" FROM renglon_entrega r INNER JOIN entrega e ON r.nro_entrega = e.nro_entrega
WHERE (EXTRACT(YEAR FROM fecha_entrega) = '2006' AND EXISTS(SELECT 1 FROM distribuidor d
WHERE (e.id_distribuidor = d.id_distribuidor AND EXISTS(SELECT 2 FROM nacional n
WHERE d.id_distribuidor = n.id_distribuidor)))) GROUP BY r.cantidad LIMIT 200;

SELECT r.cantidad
FROM renglon_entrega r
INNER JOIN entrega e ON r.nro_entrega = e.nro_entrega
INNER JOIN distribuidor d ON e.id_distribuidor = d.id_distribuidor
INNER JOIN nacional n ON d.id_distribuidor = n.id_distribuidor
WHERE EXTRACT(YEAR FROM e.fecha_entrega) = 2006
LIMIT 200;

Otra manera aun más clean de realizarlo 
SELECT r.cantidad
FROM renglon_entrega r
INNER JOIN entrega e ON r.nro_entrega = e.nro_entrega
INNER JOIN distribuidor d ON e.id_distribuidor = d.id_distribuidor
WHERE (EXTRACT(YEAR FROM e.fecha_entrega) = 2006 AND d.tipo = 'N')
LIMIT 200;

1.3) Departamento que no tenga empleado cuya diferencia entre sueldo min y max sea menor al 40% del sueldo max.

SELECT d.nombre FROM departamento d
WHERE EXISTS(SELECT 1 FROM empleado e
WHERE d.id_departamento = e.id_departamento AND EXISTS(SELECT 2 FROM tarea t
WHERE e.id_tarea = t.id_tarea AND (t.sueldo_maximo - t.sueldo_minimo) < (t.sueldo_maximo * 0.4)));

SELECT d.nombre FROM departamento d
JOIN empleado e ON d.id_departamento = e.id_departamento
JOIN tarea t ON e.id_tarea = t.id_tarea
WHERE ((t.sueldo_maximo - t.sueldo_minimo) < (t.sueldo_maximo * 0.4));

1.4)
//12387 filas

SELECT DISTINCT p.titulo from pelicula p
JOIN renglon_entrega r ON p.codigo_pelicula = r.codigo_pelicula
JOIN entrega e ON r.nro_entrega = e.nro_entrega
JOIN distribuidor d ON e.id_distribuidor = d.id_distribuidor
WHERE d.tipo NOT IN ('N');

1.5) Determinar los jefes que poseen personal a cargo y cuyos departamentos (los del jefe) se encuentren en la Argentina.
//6 filas

SELECT d.jefe_departamento
FROM departamento d
WHERE EXISTS (
    SELECT 1
    FROM empleado e
    WHERE e.id_jefe IS NOT NULL
    GROUP BY e.id_jefe
    HAVING COUNT(e.id_empleado) > 1
)
AND EXISTS (
    SELECT 2
    FROM ciudad c
    WHERE c.id_ciudad = d.id_ciudad AND c.id_pais = 'AR'
);

1.6) Liste el apellido y nombre de los empleados que pertenecen a aquellos departamentos de Argentina y donde el jefe de departamento posee una comisión de más del 10% de la que posee su empleado a cargo.
//36 filas

SELECT e.nombre, e.apellido
FROM empleado e
WHERE e.porc_comision < (
        SELECT e2.porc_comision * 0.1
        FROM empleado e2
        WHERE e2.id_empleado = e.id_jefe
    )
    AND EXISTS (
        SELECT d.id_departamento
        FROM departamento d
        WHERE e.id_departamento = d.id_departamento
        AND EXISTS (
            SELECT *
            FROM ciudad c
            WHERE d.id_ciudad = c.id_ciudad
            AND c.id_pais = 'AR'
        )
    );

1.7) Indicar la cantidad de películas entregadas a partir del 2010, por género.

SELECT COUNT(p.codigo_pelicula), p.genero
FROM pelicula p
JOIN renglon_entrega r ON p.codigo_pelicula = r.codigo_pelicula
JOIN entrega e ON e.nro_entrega = r.nro_entrega
WHERE extract(YEAR FROM e.fecha_entrega) > 2010
GROUP BY p.genero;

/*SELECT COUNT(p.codigo_pelicula) FROM pelicula p
JOIN renglon_entrega r ON p.codigo_pelicula = r.codigo_pelicula
WHERE p.codigo_pelicula IN
      (SELECT e.nro_entrega FROM entrega e
        WHERE ((e.nro_entrega = r.nro_entrega) AND (extract(YEAR FROM e.fecha_entrega) > 2010))
      )
GROUP BY genero;*/


1.8) Realizar un resumen de entregas por día, indicando el video club al cual se le realizó la entrega y la cantidad entregada. Ordenar el resultado por fecha.


1.9) Listar, para cada ciudad, el nombre de la ciudad y la cantidad de empleados mayores de edad que desempeñan tareas en departamentos de la misma y que posean al menos 30 empleados.

* Si se usa un WHERE IN y la subconsulta tiene un group by, la columna por la que se esta queriendo agrupar debe esta presente en el select de la subconsulta.

SELECT c.id_ciudad, c.nombre_ciudad, COUNT(*) AS cantidad_empleados
FROM ciudad c
JOIN departamento d ON c.id_ciudad = d.id_ciudad
JOIN empleado e ON d.id_departamento = e.id_departamento
WHERE EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM e.fecha_nacimiento) >= 18
    AND e.id_tarea IS NOT NULL
GROUP BY c.id_ciudad, c.nombre_ciudad
HAVING COUNT(*) > 30
ORDER BY c.id_ciudad;