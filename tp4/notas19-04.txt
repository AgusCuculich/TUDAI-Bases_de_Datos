https://www.postgresql.org/docs/9.5/queries-table-expressions.html (join)
https://www.postgresql.org/docs/9.5/functions-subquery.html (subquery expressions)

-- NULL es un valor indefinido pero sigue siendo un valor.
-- En las consultas anidadas, primero se resuelve la consulta más interna y se va yendo una por una hasta llegar a la consulta que envuelva a todas las demás.
-- Subconsulta relacionada: aquella que hace referencia a una o más columnas de la consulta principal, y estos valores se utilizan para filtrar los resultados de la subconsulta.

// WHERE x = (SELECT ....)

en este tipo de consultas donde hay un = de por medio, la subconsulta (lado der del =) debe traer una sola fila ya que (del lado der) no va evaluando fila por fila de la columna para ver si cada elemento coincide con el lado izq. Cosa que de hecho, sucede al reves, del lado izq se recorren todas las filas y se las compara 1 x 1 para ver si coinden con el unico resultado que trae la subconsulta de lado der,

Ej: SELECT * FROM A WHERE cantidad_a = (SELECT MIN(cantidad_b) FROM B);

// WHERE x IN(subconsulta)/ WHERE x IN(val1, val2, val3...)	// WHERE x NOT IN

IN actua como si se tratara de un OR. Al obtener los resultados de la subconsulta, los mismos serán comparados uno por uno como si se tratara de un bucle, donde si la consulta (externa) encuentra al menos una fila que cumple con la condición de igualdad (de al menos uno de los valores o del único valor), devolverá un conjunto de resultados que contiene todas las filas que coinciden. Si ninguna fila cumple con la condición, el resultado estará vacío.

-- eso significa que habria que tener cuidado de los repetidos que puedan haber del lado derecho?

Ej: SELECT * FROM A WHERE cant_a IN (SELECT cant_b FROM B)

----> NULL
"Two rows are considered equal if all their corresponding members are non-null and equal; the rows are unequal if any corresponding members are non-null and unequal; otherwise the result of that row comparison is unknown (null). If all the per-row results are either unequal or null, with at least one null, then the result of IN is null."

// WHERE x = ANY(subconsulta)

Se comporta igual que si fuera un IN, con la diferencia de que el anterior solo evalua igualdad, mientras que en este se pueden utilizar los operadores <, >

Ej: SELECT * FROM A WHERE cant_a < ANY (10 20 30);  <-- subconsulta
Evalua cada elemento de la columna cant_a para determinar si es o no menor a alguno(ANY) de los valores del subconjunto. (Devuelve los elementos que cumplan con la condición).

// WHERE x < ALL (sub)

Por cada elemento del lado izq, verifica que sean menos que todos los elementos traidos de la subconsulta

Ej: SELECT * FROM A WHERE cant_a < ALL (SELECT cant_b FROM B)

// WHERE EXISTS(sub)	// NOT EXISTS(SUB)

Verifica la existencia de elementos que cumplan con la subconsulta (si es el caso retorna un verdadero y si no retorna falso). The subquery will generally only be executed long enough to determine whether at least one row is returned, not all the way to completion

Ej: SELECT * FROM A WHERE EXISTS(SELECT 1 FROM B WHERE x)
(Al tener un "SELECT 1" significa que cuando se cumpla la x condición, se proyectara un 1 como resultado. "Since the result depends only on whether any rows are returned, and not on the contents of those rows, the output list of the subquery is normally unimportant. A common coding convention is to write all EXISTS tests in the form EXISTS(SELECT 1 WHERE ...)."

	|PERFORMANCE (consulta de más de una tabla vs join)	----> Hacer tabla con comparación de sintáxis
	|La primera crea una mega tabla, generada a partir de unir una por una las filas de la primera tabla con todas las filas de la segunda tabla (o sea que la primera fila de A se 		|repetira unida a todas las de B, luego la segunda fila se repetira unida a todas las de B, y asi hasta que no hayan más filas en A. Una vez obtenida esta mega tabla, se filtraran 		|las que realmente cumplan el requisito de union (por ejemplo que un id sea igual en ambas tablas).
	|El join en cambio, no pasa por la creación de una mega tabla, sino que directamente toma una a una las filas de la tabla A, las compara a las de la tabla B, y si hay coincidencia 		|entonces esta pasará a formar parte de la nueva tabla generada por los ensambles.
	|Conclusión: en cuanto a performance, la segunda opción tiene menos impacto para el sistema que lo este corriendo.

Right join: combina filas de dos tablas basándose en una condición de unión especificada. Incluye todas las filas de la tabla de la derecha (segunda tabla) incluso si no tienen correspondencia en la tabla de la izquierda (primera tabla). En el último caso, si existen valores en la tabla B pero no hubo ninguno al que anexarlo en A, estos mismos serán rellenados con NULL en la nueva tabla.

Left join: First, an inner join is performed. Then, for each row in T1 that does not satisfy the join condition with any row in T2, a joined row is added with null values in columns of T2. Thus, the joined table always has at least one row for each row in T1.

Full join: se crea una nueva tabla completa en su totalidad de las filas en A y B. Donde se hallen valores que cumplan con la condición, los valores correspondientes de ambas tablas rellenaran las casillas de una misma fila de la nueva tabla, mientras que las filas cuyos valores no cumplan con la condición, pasarán a formar parte de la nueva tabla pero con algunos valores NULL en las columnas correspondientes a la otra tabla.


Union (este saca repetidos) & Union All
Intersect
Except (diferencia de conjuntos)
distinct
operadores aritméticos
as
between
like y ilike
is [not] null
lógica trivaluada (screen filmina 26 p1)
order by
limit y offset
funciones de grupo (sum, avg, stddev, max,min, count)
group by y having (el where cuando se agrupan los resultados).
```SQL
```
Tener presente que la subconsulta de un NOT IN puede
retornar valores nulos.